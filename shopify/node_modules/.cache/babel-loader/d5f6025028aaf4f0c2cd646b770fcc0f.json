{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\New folder (3)\\\\src\\\\ShopifyContext.js\";\nimport React, { Component } from 'react';\nimport Client from 'shopify-buy';\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from 'apollo-link-context';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = Client.buildClient({\n  domain: 's3bg.myshopify.com',\n  storefrontAccessToken: '7b036ffd844a4ddefa4e99c653c27bf3'\n}); //\n\nconst httpLink = createHttpLink({\n  uri: 'http://s3bg.myshopify.com/api/graphql'\n});\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': '7b036ffd844a4ddefa4e99c653c27bf3'\n  }\n}));\nconst apolloClient = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nconst ShopifyContext = /*#__PURE__*/React.createContext();\nexport class ShopifyProvider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      products: [],\n      product: {},\n      collections: [],\n      imgs: [],\n      cart: {},\n      selectedProducts: [],\n      searchedProducts: [],\n      res: {},\n      shippingPrice: {}\n    };\n\n    this.fetchProducts = async () => {\n      const products = await client.product.fetchAll();\n      this.setState({\n        products: products\n      });\n      console.log(products);\n      products.map(product => {\n        console.log(product.images);\n      });\n    };\n\n    this.fetchProductByHandle = async handle => {\n      const product = await client.product.fetchByHandle(handle);\n      this.setState({\n        product\n      }); //console.log(product);\n    };\n\n    this.fetchSearchProducts = key => {\n      const searchedProducts = this.state.products.filter(x => x.title.toLowerCase().includes(key.toLowerCase()));\n      this.setState({\n        searchedProducts: searchedProducts\n      });\n    };\n\n    this.fetchCollections = async () => {\n      const collections = await client.collection.fetchAll();\n      console.log(collections);\n      collections.map(collection => {\n        console.log(collection.title);\n      });\n      this.setState({\n        collections: collections.map(x => ({\n          label: x.title,\n          value: x.handle\n        }))\n      });\n    };\n\n    this.fetchProductInfo = async handle => {\n      const product = await client.product.fetchByHandle(handle);\n      this.setState({\n        product: product\n      });\n      this.setState({\n        imgs: product.images\n      });\n    };\n\n    this.removeProduct = async (checkoutId, lineitemsIds) => {\n      const cart = await client.checkout.removeLineItems(checkoutId, lineitemsIds);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.removeDiscountCoupon = async (checkoutId, discountCode) => {\n      const cart = await client.checkout.removeDiscount(checkoutId, discountCode);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.addDiscountCoupon = async (checkoutId, discountCode) => {\n      const cart = await client.checkout.addDiscount(checkoutId, discountCode);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.setShippingPrice = shippingPrice => {\n      this.setState({\n        shippingPrice: shippingPrice\n      });\n    };\n\n    this.fetchCollectionByHandle = async handle => {\n      const selectedCatalogProduct = await client.collection.fetchByHandle(handle);\n      this.setState({\n        selectedProducts: selectedCatalogProduct.products\n      });\n    };\n\n    this.createCart = async () => {\n      const cart = await client.checkout.create();\n      localStorage.setItem(\"cart_id\", cart.id);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.fetchCart = async () => {\n      client.checkout.fetch(localStorage.getItem(\"cart_id\")).then(cart => {\n        this.setState({\n          cart: cart\n        });\n        console.log(\"cart :\");\n        console.log(cart);\n      });\n    };\n\n    this.addProductToCart = async (variantId, quantity) => {\n      const productItem = {\n        variantId: variantId,\n        quantity: quantity\n      };\n      const cart = await client.checkout.addLineItems(this.state.cart.id, productItem);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.updateQuantity = async (checkoutId, id, quantity) => {\n      const cart = await client.checkout.updateLineItems(checkoutId, [{\n        id: id,\n        quantity: quantity\n      }]);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.updateShippingAddress = async (cartId, shippingAddress) => {\n      const address = await client.checkout.updateShippingAddress(cartId, shippingAddress);\n      this.setState({\n        updateAddress: address\n      }); //  const cart=await client.checkout.updateShippingAddress(cartId, shippingAddress)\n      // this.setState({cart});\n      // console.log(cart.shippingAddress);\n    };\n\n    this.testGraphQL = async () => {\n      const productsQuery = client.graphQLClient.query(root => {\n        root.addConnection('products', {\n          args: {\n            first: 10\n          }\n        }, product => {\n          product.add('title');\n        });\n      });\n      const {\n        data\n      } = await client.graphQLClient.send(productsQuery);\n      console.log(\"***\");\n      console.log(\"***\");\n      console.log(data);\n      console.log(\"***\");\n      const collectionQuery = client.graphQLClient.query(root => {\n        root.addConnection('collections', {\n          args: {\n            first: 10\n          }\n        }, product => {\n          product.add('id');\n        });\n      });\n      const res = await client.graphQLClient.send(collectionQuery);\n      console.log(\"***\");\n      console.log(res);\n      console.log(\"***\");\n      const checkoutQuery = client.graphQLClient.query(root => {\n        root.add('node', {\n          args: {\n            id: localStorage.cart_id\n          }\n        }, node => {\n          node.addInlineFragmentOn('Checkout', checkout => {\n            checkout.add('totalTax');\n            checkout.add('taxesIncluded');\n            checkout.add('taxExempt');\n            checkout.add('subtotalPrice');\n            checkout.add('totalPrice');\n            checkout.add('email');\n            checkout.add('createdAt');\n            checkout.add('webUrl');\n            checkout.add('requiresShipping');\n          });\n        });\n      });\n      const shopRes = await client.graphQLClient.send(checkoutQuery);\n      console.log(\"***\");\n      console.log(shopRes);\n      console.log(\"***\");\n    };\n\n    this.testApollo = async () => {\n      const query = gql`\n  query {\n    shop {\n      name\n      description\n      products(first:20) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            title\n            options {\n              name\n              values\n            }\n            variants(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    src\n                  }\n                  price\n                }\n              }\n            }\n            images(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n      const res = await apolloClient.query({\n        query: query\n      });\n      console.log(\"***\");\n      console.log(res);\n      console.log(\"***\");\n    };\n\n    this.getShippingMethod = async () => {\n      const query = gql`\n\n  query checkout($checkoutid: ID!){\n\n      node(id: $checkoutid) {\n\n        ... on Checkout {\n\n            totalTax\n\n            taxesIncluded\n\n            taxExempt\n\n            subtotalPrice\n\n            totalPrice\n\n            email\n\n            createdAt\n\n            requiresShipping\n\n            availableShippingRates {\n\n              ready\n\n              shippingRates {\n\n                handle\n\n                priceV2 {\n\n                  amount\n\n                }\n\n                title\n\n              }\n\n            }\n\n        }\n\n    }\n\n  }\n  `;\n      const res = await apolloClient.query({\n        query: query,\n        variables: {\n          checkoutid: localStorage.cart_id\n        }\n      });\n      console.log(\"**checkoutid**\");\n      console.log(res);\n      this.setState({\n        res: res.data.node\n      });\n      console.log(\"*******\");\n    };\n\n    this.updateShipping = async shippingHandle => {\n      const mut = gql`mutation checkoutShippingLineUpdate($checkoutId: ID!, $shippingRateHandle: String!) {\ncheckoutShippingLineUpdate(checkoutId: $checkoutId, shippingRateHandle: $shippingRateHandle) {\n  checkout {\n    id\n  }\n  checkoutUserErrors {\n    code\n    field\n    message\n  }\n}\n}\n`;\n      const response = await apolloClient.mutate({\n        mutation: mut,\n        variables: {\n          checkoutId: localStorage.cart_id,\n          shippingRateHandle: shippingHandle\n        }\n      });\n      console.log(response);\n    };\n\n    this.updatepayment = async shippingHandle => {\n      const muta = gql`mutation checkoutCompleteWithCreditCardV2($checkoutId: ID!, $payment: CreditCardPaymentInputV2!) {\n            checkoutCompleteWithCreditCardV2(checkoutId: $checkoutId, payment: $payment) {\n              checkout {\n                id\n              }\n              checkoutUserErrors {\n                code\n                field\n                message\n              }\n              payment {\n                id\n              }\n            }\n          }\n`;\n      const resp = await apolloClient.mutate({\n        mutation: muta,\n        variables: {\n          checkoutId: localStorage.cart_id,\n          shippingRateHandle: shippingHandle\n        }\n      });\n      console.log(resp);\n    };\n\n    this.updatepayment = async shippingHandle => {\n      const muta = gql`mutation($input: MetafieldStorefrontVisibilityInput!) {\n        metafieldStorefrontVisibilityCreate(\n          input: $input\n        ) {\n          metafieldStorefrontVisibility {\n            id\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n`;\n      const resp = await apolloClient.mutate({\n        mutation: muta,\n        variables: {\n          \"input\": {\n            \"namespace\": \"testapp\",\n            \"key\": \"pizza-size-inches\",\n            \"ownerType\": \"PRODUCT\"\n          }\n        }\n      });\n      console.log(resp);\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.cart_id) {\n      console.log(\"Dont Create cart\");\n      this.fetchCart();\n    } else {\n      this.createCart();\n      console.log(\"Cart Created\");\n    }\n\n    this.getShippingMethod(); // this.testApollo();\n  } //\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ShopifyContext.Provider, {\n        value: { ...this.state,\n          fetchAllProducts: this.fetchProducts,\n          fetchProductInfo: this.fetchProductInfo,\n          fetchCollections: this.fetchCollections,\n          addProductToCart: this.addProductToCart,\n          fetchCart: this.fetchCart,\n          fetchCollectionByHandle: this.fetchCollectionByHandle,\n          removeProduct: this.removeProduct,\n          addDiscountCoupon: this.addDiscountCoupon,\n          removeDiscountCoupon: this.removeDiscountCoupon,\n          updateQuantity: this.updateQuantity,\n          updateShippingAddress: this.updateShippingAddress,\n          fetchSearchProducts: this.fetchSearchProducts,\n          getShippingMethod: this.getShippingMethod,\n          setShippingPrice: this.setShippingPrice,\n          updateShipping: this.updateShipping\n        },\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nconst ShopConsumer = ShopifyContext.Consumer;\nexport { ShopConsumer, ShopifyContext };\nexport default ShopifyProvider;","map":{"version":3,"sources":["C:/Users/HP/Desktop/New folder (3)/src/ShopifyContext.js"],"names":["React","Component","Client","ApolloClient","InMemoryCache","createHttpLink","setContext","gql","client","buildClient","domain","storefrontAccessToken","httpLink","uri","middlewareLink","headers","apolloClient","link","concat","cache","ShopifyContext","createContext","ShopifyProvider","state","products","product","collections","imgs","cart","selectedProducts","searchedProducts","res","shippingPrice","fetchProducts","fetchAll","setState","console","log","map","images","fetchProductByHandle","handle","fetchByHandle","fetchSearchProducts","key","filter","x","title","toLowerCase","includes","fetchCollections","collection","label","value","fetchProductInfo","removeProduct","checkoutId","lineitemsIds","checkout","removeLineItems","removeDiscountCoupon","discountCode","removeDiscount","addDiscountCoupon","addDiscount","setShippingPrice","fetchCollectionByHandle","selectedCatalogProduct","createCart","create","localStorage","setItem","id","fetchCart","fetch","getItem","then","addProductToCart","variantId","quantity","productItem","addLineItems","updateQuantity","updateLineItems","updateShippingAddress","cartId","shippingAddress","address","updateAddress","testGraphQL","productsQuery","graphQLClient","query","root","addConnection","args","first","add","data","send","collectionQuery","checkoutQuery","cart_id","node","addInlineFragmentOn","shopRes","testApollo","getShippingMethod","variables","checkoutid","updateShipping","shippingHandle","mut","response","mutate","mutation","shippingRateHandle","updatepayment","muta","resp","componentDidMount","render","fetchAllProducts","props","children","ShopConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Client from 'shopify-buy';\r\n\r\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport { setContext } from 'apollo-link-context';\r\nimport gql from 'graphql-tag';\r\n\r\n\r\nconst client = Client.buildClient({\r\n    domain: 's3bg.myshopify.com',\r\n    storefrontAccessToken: '7b036ffd844a4ddefa4e99c653c27bf3'\r\n});\r\n\r\n\r\n//\r\nconst httpLink = createHttpLink({ uri: 'http://s3bg.myshopify.com/api/graphql' })\r\n\r\nconst middlewareLink = setContext(() => ({\r\n    headers: {\r\n        'X-Shopify-Storefront-Access-Token': '7b036ffd844a4ddefa4e99c653c27bf3',\r\n\r\n    }\r\n}))\r\n\r\nconst apolloClient = new ApolloClient({\r\n    link: middlewareLink.concat(httpLink),\r\n    cache: new InMemoryCache(),\r\n})\r\n\r\nconst ShopifyContext = React.createContext();\r\n\r\nexport class ShopifyProvider extends Component {\r\n\r\n    state = {\r\n        products: [],\r\n        product: {},\r\n        collections: [],\r\n        imgs: [],\r\n        cart: {},\r\n        selectedProducts: [],\r\n        searchedProducts: [],\r\n        res: {},\r\n        shippingPrice: {}\r\n    };\r\n\r\n\r\n    //fetch all products\r\n    fetchProducts = async () => {\r\n        const products = await client.product.fetchAll();\r\n        this.setState({ products: products });\r\n        console.log(products);\r\n\r\n        products.map(product => {\r\n            console.log(product.images)\r\n        })\r\n    }\r\n\r\n    fetchProductByHandle = async handle => {\r\n        const product = await client.product.fetchByHandle(handle);\r\n        this.setState({ product });\r\n        //console.log(product);\r\n    }\r\n\r\n\r\n    //search\r\n    fetchSearchProducts = (key) => {\r\n        const searchedProducts = this.state.products.filter(x => x.title.toLowerCase().includes(key.toLowerCase()))\r\n        this.setState({ searchedProducts: searchedProducts });\r\n    }\r\n\r\n\r\n\r\n    //fetch collections\r\n    fetchCollections = async () => {\r\n        const collections = await client.collection.fetchAll();\r\n        console.log(collections)\r\n        collections.map(collection => {\r\n            console.log(collection.title);\r\n        })\r\n        this.setState({ collections: collections.map(x => ({ label: x.title, value: x.handle })) });\r\n    };\r\n\r\n    //fetch product info\r\n    fetchProductInfo = async (handle) => {\r\n        const product = await client.product.fetchByHandle(handle);\r\n        this.setState({ product: product });\r\n        this.setState({ imgs: product.images })\r\n    };\r\n\r\n    //remove product\r\n    removeProduct = async (checkoutId, lineitemsIds) => {\r\n        const cart = await client.checkout.removeLineItems(checkoutId, lineitemsIds);\r\n        this.setState({ cart: cart })\r\n    }\r\n\r\n    removeDiscountCoupon = async (checkoutId, discountCode) => {\r\n        const cart = await client.checkout.removeDiscount(checkoutId, discountCode);\r\n        this.setState({ cart: cart })\r\n\r\n    }\r\n    addDiscountCoupon = async (checkoutId, discountCode) => {\r\n        const cart = await client.checkout.addDiscount(checkoutId, discountCode);\r\n        this.setState({ cart: cart })\r\n\r\n    }\r\n\r\n    //setshipping\r\n    setShippingPrice = (shippingPrice) => {\r\n        this.setState({ shippingPrice: shippingPrice });\r\n    }\r\n\r\n    // localStorage.getItem(checkoutQuantity,lineitemsIds);\r\n\r\n    //fetch collection by handle\r\n    fetchCollectionByHandle = async (handle) => {\r\n        const selectedCatalogProduct = await client.collection.fetchByHandle(handle)\r\n        this.setState({ selectedProducts: selectedCatalogProduct.products });\r\n    };\r\n\r\n    //create cart\r\n    createCart = async () => {\r\n        const cart = await client.checkout.create();\r\n        localStorage.setItem(\"cart_id\", cart.id);\r\n        this.setState({ cart: cart });\r\n    }\r\n\r\n    //fetch cart\r\n    fetchCart = async () => {\r\n        client.checkout.fetch(localStorage.getItem(\"cart_id\")).then(cart => {\r\n            this.setState({ cart: cart });\r\n            console.log(\"cart :\");\r\n            console.log(cart);\r\n        });\r\n    }\r\n\r\n    //add items to cart\r\n    addProductToCart = async (variantId, quantity) => {\r\n        const productItem = {\r\n            variantId: variantId,\r\n            quantity: quantity\r\n        }\r\n        const cart = await client.checkout.addLineItems(this.state.cart.id, productItem);\r\n        this.setState({ cart: cart });\r\n    }\r\n\r\n\r\n\r\n    //updateQuantity\r\n    updateQuantity = async (checkoutId, id, quantity) => {\r\n        const cart = await client.checkout.updateLineItems(checkoutId, [{ id: id, quantity: quantity }])\r\n        this.setState({ cart: cart });\r\n    }\r\n\r\n    updateShippingAddress = async (cartId, shippingAddress) => {\r\n        const address = await client.checkout.updateShippingAddress(cartId, shippingAddress)\r\n        this.setState({ updateAddress: address })\r\n        //  const cart=await client.checkout.updateShippingAddress(cartId, shippingAddress)\r\n        // this.setState({cart});\r\n        // console.log(cart.shippingAddress);\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        if (localStorage.cart_id) {\r\n            console.log(\"Dont Create cart\")\r\n            this.fetchCart();\r\n        } else {\r\n            this.createCart();\r\n            console.log(\"Cart Created\")\r\n        }\r\n        this.getShippingMethod();\r\n        // this.testApollo();\r\n    }\r\n\r\n    //\r\n    testGraphQL = async () => {\r\n\r\n\r\n\r\n        const productsQuery = client.graphQLClient.query((root) => {\r\n            root.addConnection('products', { args: { first: 10 } }, (product) => {\r\n                product.add('title');\r\n\r\n            });\r\n        });\r\n        const { data } = await client.graphQLClient.send(productsQuery);\r\n\r\n        console.log(\"***\");\r\n        console.log(\"***\");\r\n        console.log(data);\r\n        console.log(\"***\");\r\n\r\n        const collectionQuery = client.graphQLClient.query((root) => {\r\n            root.addConnection('collections', { args: { first: 10 } }, (product) => {\r\n                product.add('id');\r\n\r\n            });\r\n        });\r\n        const res = await client.graphQLClient.send(collectionQuery);\r\n        console.log(\"***\");\r\n        console.log(res);\r\n        console.log(\"***\");\r\n\r\n        const checkoutQuery = client.graphQLClient.query((root) => {\r\n            root.add('node', { args: { id: localStorage.cart_id } }, (node) => {\r\n\r\n                node.addInlineFragmentOn('Checkout', (checkout) => {\r\n                    checkout.add('totalTax');\r\n                    checkout.add('taxesIncluded');\r\n                    checkout.add('taxExempt');\r\n                    checkout.add('subtotalPrice');\r\n                    checkout.add('totalPrice');\r\n                    checkout.add('email');\r\n                    checkout.add('createdAt');\r\n                    checkout.add('webUrl');\r\n                    checkout.add('requiresShipping');\r\n\r\n                });\r\n            });\r\n        });\r\n\r\n        const shopRes = await client.graphQLClient.send(checkoutQuery);\r\n        console.log(\"***\");\r\n        console.log(shopRes);\r\n        console.log(\"***\");\r\n    }\r\n\r\n    testApollo = async () => {\r\n        const query = gql`\r\n  query {\r\n    shop {\r\n      name\r\n      description\r\n      products(first:20) {\r\n        pageInfo {\r\n          hasNextPage\r\n          hasPreviousPage\r\n        }\r\n        edges {\r\n          node {\r\n            id\r\n            title\r\n            options {\r\n              name\r\n              values\r\n            }\r\n            variants(first: 250) {\r\n              pageInfo {\r\n                hasNextPage\r\n                hasPreviousPage\r\n              }\r\n              edges {\r\n                node {\r\n                  title\r\n                  selectedOptions {\r\n                    name\r\n                    value\r\n                  }\r\n                  image {\r\n                    src\r\n                  }\r\n                  price\r\n                }\r\n              }\r\n            }\r\n            images(first: 250) {\r\n              pageInfo {\r\n                hasNextPage\r\n                hasPreviousPage\r\n              }\r\n              edges {\r\n                node {\r\n                  src\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n        const res = await apolloClient.query({ query: query });\r\n        console.log(\"***\");\r\n        console.log(res);\r\n        console.log(\"***\");\r\n    }\r\n\r\n\r\n    getShippingMethod = async () => {\r\n\r\n        const query = gql`\r\n\r\n  query checkout($checkoutid: ID!){\r\n\r\n      node(id: $checkoutid) {\r\n\r\n        ... on Checkout {\r\n\r\n            totalTax\r\n\r\n            taxesIncluded\r\n\r\n            taxExempt\r\n\r\n            subtotalPrice\r\n\r\n            totalPrice\r\n\r\n            email\r\n\r\n            createdAt\r\n\r\n            requiresShipping\r\n\r\n            availableShippingRates {\r\n\r\n              ready\r\n\r\n              shippingRates {\r\n\r\n                handle\r\n\r\n                priceV2 {\r\n\r\n                  amount\r\n\r\n                }\r\n\r\n                title\r\n\r\n              }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n  }\r\n  `\r\n\r\n        const res = await apolloClient.query({\r\n            query: query, variables: {\r\n\r\n                checkoutid: localStorage.cart_id\r\n\r\n            }\r\n        });\r\n\r\n        console.log(\"**checkoutid**\");\r\n\r\n        console.log(res);\r\n        this.setState({ res: res.data.node })\r\n\r\n        console.log(\"*******\");\r\n\r\n\r\n\r\n    }\r\n\r\n    updateShipping = async (shippingHandle) => {\r\n        const mut = gql`mutation checkoutShippingLineUpdate($checkoutId: ID!, $shippingRateHandle: String!) {\r\ncheckoutShippingLineUpdate(checkoutId: $checkoutId, shippingRateHandle: $shippingRateHandle) {\r\n  checkout {\r\n    id\r\n  }\r\n  checkoutUserErrors {\r\n    code\r\n    field\r\n    message\r\n  }\r\n}\r\n}\r\n`\r\n\r\n        const response = await apolloClient.mutate({\r\n            mutation: mut, variables: {\r\n\r\n                checkoutId: localStorage.cart_id,\r\n                shippingRateHandle: shippingHandle\r\n\r\n            }\r\n        });\r\n\r\n        console.log(response)\r\n\r\n    }\r\n\r\n    updatepayment = async (shippingHandle) => {\r\n        const muta = gql`mutation checkoutCompleteWithCreditCardV2($checkoutId: ID!, $payment: CreditCardPaymentInputV2!) {\r\n            checkoutCompleteWithCreditCardV2(checkoutId: $checkoutId, payment: $payment) {\r\n              checkout {\r\n                id\r\n              }\r\n              checkoutUserErrors {\r\n                code\r\n                field\r\n                message\r\n              }\r\n              payment {\r\n                id\r\n              }\r\n            }\r\n          }\r\n`\r\n\r\n        const resp = await apolloClient.mutate({\r\n            mutation: muta, variables: {\r\n\r\n                checkoutId: localStorage.cart_id,\r\n                shippingRateHandle: shippingHandle\r\n\r\n            }\r\n        });\r\n\r\n        console.log(resp)\r\n\r\n    }\r\n\r\n\r\n    updatepayment = async (shippingHandle) => {\r\n      const muta = gql`mutation($input: MetafieldStorefrontVisibilityInput!) {\r\n        metafieldStorefrontVisibilityCreate(\r\n          input: $input\r\n        ) {\r\n          metafieldStorefrontVisibility {\r\n            id\r\n          }\r\n          userErrors {\r\n            field\r\n            message\r\n          }\r\n        }\r\n      }\r\n`\r\n\r\n      const resp = await apolloClient.mutate({\r\n          mutation: muta, variables: {\r\n            \"input\": {\r\n              \"namespace\": \"testapp\",\r\n              \"key\": \"pizza-size-inches\",\r\n              \"ownerType\": \"PRODUCT\"\r\n            }\r\n          }\r\n      });\r\n\r\n      console.log(resp)\r\n\r\n  }\r\n\r\n\r\n    \r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <ShopifyContext.Provider\r\n                    value={{\r\n                        ...this.state, fetchAllProducts: this.fetchProducts,\r\n                        fetchProductInfo: this.fetchProductInfo,\r\n                        fetchCollections: this.fetchCollections,\r\n                        addProductToCart: this.addProductToCart,\r\n                        fetchCart: this.fetchCart,\r\n                        fetchCollectionByHandle: this.fetchCollectionByHandle,\r\n                        removeProduct: this.removeProduct,\r\n                        addDiscountCoupon: this.addDiscountCoupon,\r\n                        removeDiscountCoupon: this.removeDiscountCoupon,\r\n                        updateQuantity: this.updateQuantity,\r\n                        updateShippingAddress: this.updateShippingAddress,\r\n                        fetchSearchProducts: this.fetchSearchProducts,\r\n                        getShippingMethod: this.getShippingMethod,\r\n                        setShippingPrice: this.setShippingPrice,\r\n                        updateShipping: this.updateShipping\r\n                    }}>\r\n                    {this.props.children}\r\n                </ShopifyContext.Provider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ShopConsumer = ShopifyContext.Consumer;\r\n\r\nexport { ShopConsumer, ShopifyContext };\r\n\r\nexport default ShopifyProvider"]},"metadata":{},"sourceType":"module"}