{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\shopify\\\\shopify\\\\src\\\\ShopifyContext.js\";\nimport React, { Component } from 'react';\nimport Client from 'shopify-buy';\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from 'apollo-link-context';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = Client.buildClient({\n  domain: 's3bg.myshopify.com',\n  storefrontAccessToken: '12de606ecc6513425d675dce0d9badaa'\n}); //\n\nconst httpLink = createHttpLink({\n  uri: 'http://s3bg.myshopify.com/api/graphql'\n});\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': '12de606ecc6513425d675dce0d9badaa'\n  }\n}));\nconst apolloClient = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nconst ShopifyContext = /*#__PURE__*/React.createContext();\nexport class ShopifyProvider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      products: [],\n      product: {},\n      collections: [],\n      imgs: [],\n      cart: {},\n      selectedProducts: [],\n      searchedProducts: [],\n      res: {},\n      shippingPrice: {},\n      metaField: \"\"\n    };\n\n    this.fetchProducts = async () => {\n      const products = await client.product.fetchAll();\n      this.setState({\n        products: products\n      });\n      console.log(products);\n      products.map(product => {\n        console.log(product.images);\n      });\n    };\n\n    this.fetchProductByHandle = async handle => {\n      const product = await client.product.fetchByHandle(handle);\n      this.setState({\n        product\n      }); //console.log(product);\n    };\n\n    this.fetchSearchProducts = key => {\n      const searchedProducts = this.state.products.filter(x => x.title.toLowerCase().includes(key.toLowerCase()));\n      this.setState({\n        searchedProducts: searchedProducts\n      });\n    };\n\n    this.signUp = async (email, password, firstName, lastName, phone) => {\n      const input = {\n        email: email,\n        password: password\n      }; // const input = {\n      //   email : email,\n      //   password : password,\n      //   firstName : firstName,\n      //   lastName: lastName,\n      //   phone: phone\n      // }\n      //   const input = {\n      //   email: email,\n      //   phone: phone,\n      //   firstName: firstName,\n      //   lastName: lastName,\n      //   acceptsMarketing: true,\n      //   addresses: [\n      //     {\n      //      address1: \"\",\n      //      city: \"\",\n      //      province: \"\",\n      //      phone : \"\",\n      //      zip : \"\",\n      //      lastName: \"\",\n      //      firstName: \"\",\n      //      country: \"\"\n      //     }\n      //   ]\n      // }\n\n      const mut = gql` mutation customerCreate($input: CustomerCreateInput!) {\n      customerCreate(input: $input) {\n        customer {\n          id\n        }\n        customerUserErrors {\n          code\n          field\n          message\n        }\n      }\n    }`;\n      const response = await apolloClient.mutate({\n        mutation: mut,\n        variables: {\n          input: input\n        }\n      });\n      console.log(response);\n    };\n\n    this.login = async (email, password) => {\n      const mut = gql`mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n      customerAccessTokenCreate(input: $input) {\n        customerAccessToken {\n          accessToken\n          expiresAt\n        }\n        customerUserErrors {\n          code\n          field\n          message\n        }\n      }\n    }  `;\n      const input = {\n        email: email,\n        password: password\n      };\n      const response = await apolloClient.mutate({\n        mutation: mut,\n        variables: {\n          input: input\n        }\n      });\n      console.log(response);\n      return response;\n    };\n\n    this.fetchCollections = async () => {\n      const collections = await client.collection.fetchAll();\n      console.log(collections);\n      collections.map(collection => {\n        console.log(collection.title);\n      });\n      this.setState({\n        collections: collections.map(x => ({\n          label: x.title,\n          value: x.handle\n        }))\n      });\n    };\n\n    this.fetchProductInfo = async handle => {\n      const product = await client.product.fetchByHandle(handle);\n      this.setState({\n        product: product\n      });\n      this.setState({\n        imgs: product.images\n      });\n    };\n\n    this.removeProduct = async (checkoutId, lineitemsIds) => {\n      const cart = await client.checkout.removeLineItems(checkoutId, lineitemsIds);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.removeDiscountCoupon = async (checkoutId, discountCode) => {\n      const cart = await client.checkout.removeDiscount(checkoutId, discountCode);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.addDiscountCoupon = async (checkoutId, discountCode) => {\n      const cart = await client.checkout.addDiscount(checkoutId, discountCode);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.setShippingPrice = shippingPrice => {\n      this.setState({\n        shippingPrice: shippingPrice\n      });\n    };\n\n    this.fetchCollectionByHandle = async handle => {\n      const selectedCatalogProduct = await client.collection.fetchByHandle(handle);\n      this.setState({\n        selectedProducts: selectedCatalogProduct.products\n      });\n    };\n\n    this.createCart = async () => {\n      const cart = await client.checkout.create();\n      localStorage.setItem(\"cart_id\", cart.id);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.fetchCart = async () => {\n      client.checkout.fetch(localStorage.getItem(\"cart_id\")).then(cart => {\n        this.setState({\n          cart: cart\n        });\n        console.log(\"cart :\");\n        console.log(cart);\n      });\n    };\n\n    this.addProductToCart = async (variantId, quantity) => {\n      const productItem = {\n        variantId: variantId,\n        quantity: quantity\n      };\n      const cart = await client.checkout.addLineItems(this.state.cart.id, productItem);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.updateQuantity = async (checkoutId, id, quantity) => {\n      const cart = await client.checkout.updateLineItems(checkoutId, [{\n        id: id,\n        quantity: quantity\n      }]);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.updateShippingAddress = async (cartId, shippingAddress) => {\n      const address = await client.checkout.updateShippingAddress(cartId, shippingAddress);\n      this.setState({\n        updateAddress: address\n      }); //  const cart=await client.checkout.updateShippingAddress(cartId, shippingAddress)\n      // this.setState({cart});\n      // console.log(cart.shippingAddress);\n    };\n\n    this.testGraphQL = async () => {\n      const productsQuery = client.graphQLClient.query(root => {\n        root.addConnection('products', {\n          args: {\n            first: 10\n          }\n        }, product => {\n          product.add('title');\n        });\n      });\n      const {\n        data\n      } = await client.graphQLClient.send(productsQuery);\n      console.log(\"***\");\n      console.log(\"***\");\n      console.log(data);\n      console.log(\"***\");\n      const collectionQuery = client.graphQLClient.query(root => {\n        root.addConnection('collections', {\n          args: {\n            first: 10\n          }\n        }, product => {\n          product.add('id');\n        });\n      });\n      const res = await client.graphQLClient.send(collectionQuery);\n      console.log(\"***\");\n      console.log(res);\n      console.log(\"***\");\n      const checkoutQuery = client.graphQLClient.query(root => {\n        root.add('node', {\n          args: {\n            id: localStorage.cart_id\n          }\n        }, node => {\n          node.addInlineFragmentOn('Checkout', checkout => {\n            checkout.add('totalTax');\n            checkout.add('taxesIncluded');\n            checkout.add('taxExempt');\n            checkout.add('subtotalPrice');\n            checkout.add('totalPrice');\n            checkout.add('email');\n            checkout.add('createdAt');\n            checkout.add('webUrl');\n            checkout.add('requiresShipping');\n          });\n        });\n      });\n      const shopRes = await client.graphQLClient.send(checkoutQuery);\n      console.log(\"***\");\n      console.log(shopRes);\n      console.log(\"***\");\n    };\n\n    this.testApollo = async () => {\n      const query = gql`\n  query {\n    shop {\n      name\n      description\n      products(first:20) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            title\n            options {\n              name\n              values\n            }\n            variants(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    src\n                  }\n                  price\n                }\n              }\n            }\n            images(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n      const res = await apolloClient.query({\n        query: query\n      });\n      console.log(\"***\");\n      console.log(res);\n      console.log(\"***\");\n    };\n\n    this.getShippingMethod = async () => {\n      const query = gql`\n\n  query checkout($checkoutid: ID!){\n\n      node(id: $checkoutid) {\n\n        ... on Checkout {\n\n            totalTax\n\n            taxesIncluded\n\n            taxExempt\n\n            subtotalPrice\n\n            totalPrice\n\n            email\n\n            createdAt\n\n            requiresShipping\n\n            availableShippingRates {\n\n              ready\n\n              shippingRates {\n\n                handle\n\n                priceV2 {\n\n                  amount\n\n                }\n\n                title\n\n              }\n\n            }\n\n        }\n\n    }\n\n  }\n  `;\n      const res = await apolloClient.query({\n        query: query,\n        variables: {\n          checkoutid: localStorage.cart_id\n        }\n      });\n      console.log(\"**checkoutid**\");\n      console.log(res);\n      this.setState({\n        res: res.data.node\n      });\n      console.log(\"*******\");\n    };\n\n    this.updateShipping = async shippingHandle => {\n      const mut = gql`mutation checkoutShippingLineUpdate($checkoutId: ID!, $shippingRateHandle: String!) {\ncheckoutShippingLineUpdate(checkoutId: $checkoutId, shippingRateHandle: $shippingRateHandle) {\n  checkout {\n    id\n  }\n  checkoutUserErrors {\n    code\n    field\n    message\n  }\n}\n}\n`;\n      const response = await apolloClient.mutate({\n        mutation: mut,\n        variables: {\n          checkoutId: localStorage.cart_id,\n          shippingRateHandle: shippingHandle\n        }\n      });\n      console.log(response);\n    };\n\n    this.getMetaField = async handle => {\n      var _res$data, _res$data$productByHa, _res$data$productByHa2;\n\n      const query = gql` query($handle: String!){\n        productByHandle(handle: $handle) {\n          partNo: metafield(namespace: \"my_fields\", key: \"part_number\") {\n            value\n          }\n        }\n      }\n`;\n      const res = await apolloClient.query({\n        query: query,\n        variables: {\n          handle: handle\n        }\n      });\n      this.setState({\n        metaField: res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$productByHa = _res$data.productByHandle) === null || _res$data$productByHa === void 0 ? void 0 : (_res$data$productByHa2 = _res$data$productByHa.partNo) === null || _res$data$productByHa2 === void 0 ? void 0 : _res$data$productByHa2.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.cart_id) {\n      console.log(\"Dont Create cart\");\n      this.fetchCart();\n    } else {\n      this.createCart();\n      console.log(\"Cart Created\");\n    }\n\n    this.getShippingMethod(); // this.testApollo();\n  } //\n\n\n  // updatepayment = async (shippingHandle) => {\n  //   const muta = gql`mutation checkoutCompleteWithCreditCardV2($checkoutId: ID!, $payment: CreditCardPaymentInputV2!) {\n  //             checkoutCompleteWithCreditCardV2(checkoutId: $checkoutId, payment: $payment) {\n  //               checkout {\n  //                 id\n  //               }\n  //               checkoutUserErrors {\n  //                 code\n  //                 field\n  //                 message\n  //               }\n  //               payment {\n  //                 id\n  //               }\n  //             }\n  //           }\n  // `\n  //   const resp = await apolloClient.mutate({\n  //     mutation: muta, variables: {\n  //       checkoutId: localStorage.cart_id,\n  //       shippingRateHandle: shippingHandle\n  //     }\n  //   });\n  //   console.log(resp)\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ShopifyContext.Provider, {\n        value: { ...this.state,\n          fetchAllProducts: this.fetchProducts,\n          fetchProductInfo: this.fetchProductInfo,\n          fetchCollections: this.fetchCollections,\n          addProductToCart: this.addProductToCart,\n          fetchCart: this.fetchCart,\n          fetchCollectionByHandle: this.fetchCollectionByHandle,\n          removeProduct: this.removeProduct,\n          addDiscountCoupon: this.addDiscountCoupon,\n          removeDiscountCoupon: this.removeDiscountCoupon,\n          updateQuantity: this.updateQuantity,\n          updateShippingAddress: this.updateShippingAddress,\n          fetchSearchProducts: this.fetchSearchProducts,\n          getShippingMethod: this.getShippingMethod,\n          setShippingPrice: this.setShippingPrice,\n          updateShipping: this.updateShipping,\n          getMetaField: this.getMetaField,\n          login: this.login,\n          signUp: this.signUp\n        },\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 5\n    }, this);\n  }\n\n}\nconst ShopConsumer = ShopifyContext.Consumer;\nexport { ShopConsumer, ShopifyContext };\nexport default ShopifyProvider;","map":{"version":3,"sources":["C:/Users/HP/Desktop/shopify/shopify/src/ShopifyContext.js"],"names":["React","Component","Client","ApolloClient","InMemoryCache","createHttpLink","setContext","gql","client","buildClient","domain","storefrontAccessToken","httpLink","uri","middlewareLink","headers","apolloClient","link","concat","cache","ShopifyContext","createContext","ShopifyProvider","state","products","product","collections","imgs","cart","selectedProducts","searchedProducts","res","shippingPrice","metaField","fetchProducts","fetchAll","setState","console","log","map","images","fetchProductByHandle","handle","fetchByHandle","fetchSearchProducts","key","filter","x","title","toLowerCase","includes","signUp","email","password","firstName","lastName","phone","input","mut","response","mutate","mutation","variables","login","fetchCollections","collection","label","value","fetchProductInfo","removeProduct","checkoutId","lineitemsIds","checkout","removeLineItems","removeDiscountCoupon","discountCode","removeDiscount","addDiscountCoupon","addDiscount","setShippingPrice","fetchCollectionByHandle","selectedCatalogProduct","createCart","create","localStorage","setItem","id","fetchCart","fetch","getItem","then","addProductToCart","variantId","quantity","productItem","addLineItems","updateQuantity","updateLineItems","updateShippingAddress","cartId","shippingAddress","address","updateAddress","testGraphQL","productsQuery","graphQLClient","query","root","addConnection","args","first","add","data","send","collectionQuery","checkoutQuery","cart_id","node","addInlineFragmentOn","shopRes","testApollo","getShippingMethod","checkoutid","updateShipping","shippingHandle","shippingRateHandle","getMetaField","productByHandle","partNo","componentDidMount","render","fetchAllProducts","props","children","ShopConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Client from 'shopify-buy';\r\n\r\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport { setContext } from 'apollo-link-context';\r\nimport gql from 'graphql-tag';\r\n\r\n\r\nconst client = Client.buildClient({\r\n  domain: 's3bg.myshopify.com',\r\n  storefrontAccessToken: '12de606ecc6513425d675dce0d9badaa'\r\n});\r\n\r\n\r\n//\r\nconst httpLink = createHttpLink({ uri: 'http://s3bg.myshopify.com/api/graphql' })\r\n\r\nconst middlewareLink = setContext(() => ({\r\n  headers: {\r\n    'X-Shopify-Storefront-Access-Token': '12de606ecc6513425d675dce0d9badaa',\r\n\r\n  }\r\n}))\r\n\r\nconst apolloClient = new ApolloClient({\r\n  link: middlewareLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n})\r\n\r\nconst ShopifyContext = React.createContext();\r\n\r\nexport class ShopifyProvider extends Component {\r\n\r\n  state = {\r\n    products: [],\r\n    product: {},\r\n    collections: [],\r\n    imgs: [],\r\n    cart: {},\r\n    selectedProducts: [],\r\n    searchedProducts: [],\r\n    res: {},\r\n    shippingPrice: {},\r\n    metaField: \"\"\r\n  };\r\n\r\n\r\n  //fetch all products\r\n  fetchProducts = async () => {\r\n    const products = await client.product.fetchAll();\r\n    this.setState({ products: products });\r\n    console.log(products);\r\n\r\n    products.map(product => {\r\n      console.log(product.images)\r\n    })\r\n  }\r\n\r\n  fetchProductByHandle = async handle => {\r\n    const product = await client.product.fetchByHandle(handle);\r\n    this.setState({ product });\r\n    //console.log(product);\r\n  }\r\n\r\n\r\n  //search\r\n  fetchSearchProducts = (key) => {\r\n    const searchedProducts = this.state.products.filter(x => x.title.toLowerCase().includes(key.toLowerCase()))\r\n    this.setState({ searchedProducts: searchedProducts });\r\n  }\r\n\r\n  \r\n\r\n  signUp = async (email, password, firstName, lastName, phone) => {\r\n    const input ={\r\n      email: email,\r\n      password : password\r\n    }\r\n    // const input = {\r\n    //   email : email,\r\n    //   password : password,\r\n    //   firstName : firstName,\r\n    //   lastName: lastName,\r\n    //   phone: phone\r\n    // }\r\n\r\n  //   const input = {\r\n  //   email: email,\r\n  //   phone: phone,\r\n  //   firstName: firstName,\r\n  //   lastName: lastName,\r\n  //   acceptsMarketing: true,\r\n  //   addresses: [\r\n  //     {\r\n  //      address1: \"\",\r\n  //      city: \"\",\r\n  //      province: \"\",\r\n  //      phone : \"\",\r\n  //      zip : \"\",\r\n  //      lastName: \"\",\r\n  //      firstName: \"\",\r\n  //      country: \"\"\r\n  //     }\r\n  //   ]\r\n  // }\r\n    const mut = gql` mutation customerCreate($input: CustomerCreateInput!) {\r\n      customerCreate(input: $input) {\r\n        customer {\r\n          id\r\n        }\r\n        customerUserErrors {\r\n          code\r\n          field\r\n          message\r\n        }\r\n      }\r\n    }`\r\n\r\n \r\n    const response = await apolloClient.mutate({\r\n      mutation: mut, variables: {\r\n        input: input\r\n      }\r\n    });\r\n\r\n    console.log(response)\r\n  }\r\n\r\n\r\n\r\n\r\n  login = async (email, password) => {\r\n    const mut = gql`mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\r\n      customerAccessTokenCreate(input: $input) {\r\n        customerAccessToken {\r\n          accessToken\r\n          expiresAt\r\n        }\r\n        customerUserErrors {\r\n          code\r\n          field\r\n          message\r\n        }\r\n      }\r\n    }  `\r\n\r\n    const input = {\r\n      email: email,\r\n      password: password\r\n    }\r\n\r\n    const response = await apolloClient.mutate({\r\n      mutation: mut, variables: {\r\n        input: input\r\n      }\r\n    });\r\n\r\n    console.log(response)\r\n    return response;\r\n  }\r\n\r\n\r\n\r\n\r\n//fetch collections\r\nfetchCollections = async () => {\r\n  const collections = await client.collection.fetchAll();\r\n  console.log(collections)\r\n  collections.map(collection => {\r\n    console.log(collection.title);\r\n  })\r\n  this.setState({ collections: collections.map(x => ({ label: x.title, value: x.handle })) });\r\n};\r\n\r\n//fetch product info\r\nfetchProductInfo = async (handle) => {\r\n  const product = await client.product.fetchByHandle(handle);\r\n  this.setState({ product: product });\r\n  this.setState({ imgs: product.images })\r\n};\r\n\r\n//remove product\r\nremoveProduct = async (checkoutId, lineitemsIds) => {\r\n  const cart = await client.checkout.removeLineItems(checkoutId, lineitemsIds);\r\n  this.setState({ cart: cart })\r\n}\r\n\r\nremoveDiscountCoupon = async (checkoutId, discountCode) => {\r\n  const cart = await client.checkout.removeDiscount(checkoutId, discountCode);\r\n  this.setState({ cart: cart })\r\n\r\n}\r\naddDiscountCoupon = async (checkoutId, discountCode) => {\r\n  const cart = await client.checkout.addDiscount(checkoutId, discountCode);\r\n  this.setState({ cart: cart })\r\n\r\n}\r\n\r\n//setshipping\r\nsetShippingPrice = (shippingPrice) => {\r\n  this.setState({ shippingPrice: shippingPrice });\r\n}\r\n\r\n// localStorage.getItem(checkoutQuantity,lineitemsIds);\r\n\r\n//fetch collection by handle\r\nfetchCollectionByHandle = async (handle) => {\r\n  const selectedCatalogProduct = await client.collection.fetchByHandle(handle)\r\n  this.setState({ selectedProducts: selectedCatalogProduct.products });\r\n};\r\n\r\n//create cart\r\ncreateCart = async () => {\r\n  const cart = await client.checkout.create();\r\n  localStorage.setItem(\"cart_id\", cart.id);\r\n  this.setState({ cart: cart });\r\n}\r\n\r\n//fetch cart\r\nfetchCart = async () => {\r\n  client.checkout.fetch(localStorage.getItem(\"cart_id\")).then(cart => {\r\n    this.setState({ cart: cart });\r\n    console.log(\"cart :\");\r\n    console.log(cart);\r\n  });\r\n}\r\n\r\n//add items to cart\r\naddProductToCart = async (variantId, quantity) => {\r\n  const productItem = {\r\n    variantId: variantId,\r\n    quantity: quantity\r\n  }\r\n  const cart = await client.checkout.addLineItems(this.state.cart.id, productItem);\r\n  this.setState({ cart: cart });\r\n}\r\n\r\n\r\n\r\n//updateQuantity\r\nupdateQuantity = async (checkoutId, id, quantity) => {\r\n  const cart = await client.checkout.updateLineItems(checkoutId, [{ id: id, quantity: quantity }])\r\n  this.setState({ cart: cart });\r\n}\r\n\r\nupdateShippingAddress = async (cartId, shippingAddress) => {\r\n  const address = await client.checkout.updateShippingAddress(cartId, shippingAddress)\r\n  this.setState({ updateAddress: address })\r\n  //  const cart=await client.checkout.updateShippingAddress(cartId, shippingAddress)\r\n  // this.setState({cart});\r\n  // console.log(cart.shippingAddress);\r\n};\r\n\r\n\r\ncomponentDidMount() {\r\n  if (localStorage.cart_id) {\r\n    console.log(\"Dont Create cart\")\r\n    this.fetchCart();\r\n  } else {\r\n    this.createCart();\r\n    console.log(\"Cart Created\")\r\n  }\r\n  this.getShippingMethod();\r\n  // this.testApollo();\r\n}\r\n\r\n//\r\ntestGraphQL = async () => {\r\n\r\n\r\n\r\n  const productsQuery = client.graphQLClient.query((root) => {\r\n    root.addConnection('products', { args: { first: 10 } }, (product) => {\r\n      product.add('title');\r\n\r\n    });\r\n  });\r\n  const { data } = await client.graphQLClient.send(productsQuery);\r\n\r\n  console.log(\"***\");\r\n  console.log(\"***\");\r\n  console.log(data);\r\n  console.log(\"***\");\r\n\r\n  const collectionQuery = client.graphQLClient.query((root) => {\r\n    root.addConnection('collections', { args: { first: 10 } }, (product) => {\r\n      product.add('id');\r\n\r\n    });\r\n  });\r\n  const res = await client.graphQLClient.send(collectionQuery);\r\n  console.log(\"***\");\r\n  console.log(res);\r\n  console.log(\"***\");\r\n\r\n  const checkoutQuery = client.graphQLClient.query((root) => {\r\n    root.add('node', { args: { id: localStorage.cart_id } }, (node) => {\r\n\r\n      node.addInlineFragmentOn('Checkout', (checkout) => {\r\n        checkout.add('totalTax');\r\n        checkout.add('taxesIncluded');\r\n        checkout.add('taxExempt');\r\n        checkout.add('subtotalPrice');\r\n        checkout.add('totalPrice');\r\n        checkout.add('email');\r\n        checkout.add('createdAt');\r\n        checkout.add('webUrl');\r\n        checkout.add('requiresShipping');\r\n\r\n      });\r\n    });\r\n  });\r\n\r\n  const shopRes = await client.graphQLClient.send(checkoutQuery);\r\n  console.log(\"***\");\r\n  console.log(shopRes);\r\n  console.log(\"***\");\r\n}\r\n\r\ntestApollo = async () => {\r\n  const query = gql`\r\n  query {\r\n    shop {\r\n      name\r\n      description\r\n      products(first:20) {\r\n        pageInfo {\r\n          hasNextPage\r\n          hasPreviousPage\r\n        }\r\n        edges {\r\n          node {\r\n            id\r\n            title\r\n            options {\r\n              name\r\n              values\r\n            }\r\n            variants(first: 250) {\r\n              pageInfo {\r\n                hasNextPage\r\n                hasPreviousPage\r\n              }\r\n              edges {\r\n                node {\r\n                  title\r\n                  selectedOptions {\r\n                    name\r\n                    value\r\n                  }\r\n                  image {\r\n                    src\r\n                  }\r\n                  price\r\n                }\r\n              }\r\n            }\r\n            images(first: 250) {\r\n              pageInfo {\r\n                hasNextPage\r\n                hasPreviousPage\r\n              }\r\n              edges {\r\n                node {\r\n                  src\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n  const res = await apolloClient.query({ query: query });\r\n  console.log(\"***\");\r\n  console.log(res);\r\n  console.log(\"***\");\r\n}\r\n\r\n\r\n\r\n\r\ngetShippingMethod = async () => {\r\n\r\n  const query = gql`\r\n\r\n  query checkout($checkoutid: ID!){\r\n\r\n      node(id: $checkoutid) {\r\n\r\n        ... on Checkout {\r\n\r\n            totalTax\r\n\r\n            taxesIncluded\r\n\r\n            taxExempt\r\n\r\n            subtotalPrice\r\n\r\n            totalPrice\r\n\r\n            email\r\n\r\n            createdAt\r\n\r\n            requiresShipping\r\n\r\n            availableShippingRates {\r\n\r\n              ready\r\n\r\n              shippingRates {\r\n\r\n                handle\r\n\r\n                priceV2 {\r\n\r\n                  amount\r\n\r\n                }\r\n\r\n                title\r\n\r\n              }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n  }\r\n  `\r\n\r\n  const res = await apolloClient.query({\r\n    query: query, variables: {\r\n\r\n      checkoutid: localStorage.cart_id\r\n\r\n    }\r\n  });\r\n\r\n  console.log(\"**checkoutid**\");\r\n\r\n  console.log(res);\r\n  this.setState({ res: res.data.node })\r\n\r\n  console.log(\"*******\");\r\n\r\n\r\n\r\n}\r\n\r\nupdateShipping = async (shippingHandle) => {\r\n  const mut = gql`mutation checkoutShippingLineUpdate($checkoutId: ID!, $shippingRateHandle: String!) {\r\ncheckoutShippingLineUpdate(checkoutId: $checkoutId, shippingRateHandle: $shippingRateHandle) {\r\n  checkout {\r\n    id\r\n  }\r\n  checkoutUserErrors {\r\n    code\r\n    field\r\n    message\r\n  }\r\n}\r\n}\r\n`\r\n\r\n  const response = await apolloClient.mutate({\r\n    mutation: mut, variables: {\r\n\r\n      checkoutId: localStorage.cart_id,\r\n      shippingRateHandle: shippingHandle\r\n\r\n    }\r\n  });\r\n\r\n  console.log(response)\r\n\r\n}\r\n\r\n\r\ngetMetaField = async (handle) => {\r\n  const query = gql` query($handle: String!){\r\n        productByHandle(handle: $handle) {\r\n          partNo: metafield(namespace: \"my_fields\", key: \"part_number\") {\r\n            value\r\n          }\r\n        }\r\n      }\r\n`\r\n  const res = await apolloClient.query({\r\n    query: query, variables: {\r\n      handle: handle\r\n    }\r\n  });\r\n  this.setState({ metaField: res?.data?.productByHandle?.partNo?.value })\r\n}\r\n\r\n// updatepayment = async (shippingHandle) => {\r\n//   const muta = gql`mutation checkoutCompleteWithCreditCardV2($checkoutId: ID!, $payment: CreditCardPaymentInputV2!) {\r\n//             checkoutCompleteWithCreditCardV2(checkoutId: $checkoutId, payment: $payment) {\r\n//               checkout {\r\n//                 id\r\n//               }\r\n//               checkoutUserErrors {\r\n//                 code\r\n//                 field\r\n//                 message\r\n//               }\r\n//               payment {\r\n//                 id\r\n//               }\r\n//             }\r\n//           }\r\n// `\r\n\r\n//   const resp = await apolloClient.mutate({\r\n//     mutation: muta, variables: {\r\n\r\n//       checkoutId: localStorage.cart_id,\r\n//       shippingRateHandle: shippingHandle\r\n\r\n//     }\r\n//   });\r\n\r\n//   console.log(resp)\r\n\r\n// }\r\n\r\n\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n\r\n      <ShopifyContext.Provider\r\n        value={{\r\n          ...this.state, fetchAllProducts: this.fetchProducts,\r\n          fetchProductInfo: this.fetchProductInfo,\r\n          fetchCollections: this.fetchCollections,\r\n          addProductToCart: this.addProductToCart,\r\n          fetchCart: this.fetchCart,\r\n          fetchCollectionByHandle: this.fetchCollectionByHandle,\r\n          removeProduct: this.removeProduct,\r\n          addDiscountCoupon: this.addDiscountCoupon,\r\n          removeDiscountCoupon: this.removeDiscountCoupon,\r\n          updateQuantity: this.updateQuantity,\r\n          updateShippingAddress: this.updateShippingAddress,\r\n          fetchSearchProducts: this.fetchSearchProducts,\r\n          getShippingMethod: this.getShippingMethod,\r\n          setShippingPrice: this.setShippingPrice,\r\n          updateShipping: this.updateShipping,\r\n          getMetaField: this.getMetaField,\r\n          login: this.login,\r\n          signUp: this.signUp\r\n        }}>\r\n        {this.props.children}\r\n      </ShopifyContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nconst ShopConsumer = ShopifyContext.Consumer;\r\n\r\nexport { ShopConsumer, ShopifyContext };\r\n\r\nexport default ShopifyProvider"]},"metadata":{},"sourceType":"module"}