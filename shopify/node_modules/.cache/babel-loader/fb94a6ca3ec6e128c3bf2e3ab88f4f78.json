{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\shopify\\\\shopify\\\\src\\\\ShopifyContext.js\";\nimport React, { Component } from 'react';\nimport Client from 'shopify-buy';\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from 'apollo-link-context';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = Client.buildClient({\n  domain: 's3bg.myshopify.com',\n  storefrontAccessToken: '7b036ffd844a4ddefa4e99c653c27bf3'\n}); //\n\nconst httpLink = createHttpLink({\n  uri: 'http://s3bg.myshopify.com/api/graphql'\n});\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': '7b036ffd844a4ddefa4e99c653c27bf3'\n  }\n}));\nconst apolloClient = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nconst ShopifyContext = /*#__PURE__*/React.createContext();\nexport class ShopifyProvider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      products: [],\n      product: {},\n      collections: [],\n      imgs: [],\n      cart: {},\n      selectedProducts: [],\n      searchedProducts: [],\n      res: {},\n      shippingPrice: {}\n    };\n\n    this.fetchProducts = async () => {\n      const products = await client.product.fetchAll();\n      this.setState({\n        products: products\n      });\n      console.log(products);\n      products.map(product => {\n        console.log(product.images);\n      });\n    };\n\n    this.fetchProductByHandle = async handle => {\n      const product = await client.product.fetchByHandle(handle);\n      this.setState({\n        product\n      }); //console.log(product);\n    };\n\n    this.fetchSearchProducts = key => {\n      const searchedProducts = this.state.products.filter(x => x.title.toLowerCase().includes(key.toLowerCase()));\n      this.setState({\n        searchedProducts: searchedProducts\n      });\n    };\n\n    this.fetchCollections = async () => {\n      const collections = await client.collection.fetchAll();\n      console.log(collections);\n      collections.map(collection => {\n        console.log(collection.title);\n      });\n      this.setState({\n        collections: collections.map(x => ({\n          label: x.title,\n          value: x.handle\n        }))\n      });\n    };\n\n    this.fetchProductInfo = async handle => {\n      const product = await client.product.fetchByHandle(handle);\n      this.setState({\n        product: product\n      });\n      this.setState({\n        imgs: product.images\n      });\n    };\n\n    this.removeProduct = async (checkoutId, lineitemsIds) => {\n      const cart = await client.checkout.removeLineItems(checkoutId, lineitemsIds);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.removeDiscountCoupon = async (checkoutId, discountCode) => {\n      const cart = await client.checkout.removeDiscount(checkoutId, discountCode);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.addDiscountCoupon = async (checkoutId, discountCode) => {\n      const cart = await client.checkout.addDiscount(checkoutId, discountCode);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.setShippingPrice = shippingPrice => {\n      this.setState({\n        shippingPrice: shippingPrice\n      });\n    };\n\n    this.fetchCollectionByHandle = async handle => {\n      const selectedCatalogProduct = await client.collection.fetchByHandle(handle);\n      this.setState({\n        selectedProducts: selectedCatalogProduct.products\n      });\n    };\n\n    this.createCart = async () => {\n      const cart = await client.checkout.create();\n      localStorage.setItem(\"cart_id\", cart.id);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.fetchCart = async () => {\n      client.checkout.fetch(localStorage.getItem(\"cart_id\")).then(cart => {\n        this.setState({\n          cart: cart\n        });\n        console.log(\"cart :\");\n        console.log(cart);\n      });\n    };\n\n    this.addProductToCart = async (variantId, quantity) => {\n      const productItem = {\n        variantId: variantId,\n        quantity: quantity\n      };\n      const cart = await client.checkout.addLineItems(this.state.cart.id, productItem);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.updateQuantity = async (checkoutId, id, quantity) => {\n      const cart = await client.checkout.updateLineItems(checkoutId, [{\n        id: id,\n        quantity: quantity\n      }]);\n      this.setState({\n        cart: cart\n      });\n    };\n\n    this.updateShippingAddress = async (cartId, shippingAddress) => {\n      const address = await client.checkout.updateShippingAddress(cartId, shippingAddress);\n      this.setState({\n        updateAddress: address\n      }); //  const cart=await client.checkout.updateShippingAddress(cartId, shippingAddress)\n      // this.setState({cart});\n      // console.log(cart.shippingAddress);\n    };\n\n    this.testGraphQL = async () => {\n      const productsQuery = client.graphQLClient.query(root => {\n        root.addConnection('products', {\n          args: {\n            first: 10\n          }\n        }, product => {\n          product.add('title');\n        });\n      });\n      const {\n        data\n      } = await client.graphQLClient.send(productsQuery);\n      console.log(\"***\");\n      console.log(\"***\");\n      console.log(data);\n      console.log(\"***\");\n      const collectionQuery = client.graphQLClient.query(root => {\n        root.addConnection('collections', {\n          args: {\n            first: 10\n          }\n        }, product => {\n          product.add('id');\n        });\n      });\n      const res = await client.graphQLClient.send(collectionQuery);\n      console.log(\"***\");\n      console.log(res);\n      console.log(\"***\");\n      const checkoutQuery = client.graphQLClient.query(root => {\n        root.add('node', {\n          args: {\n            id: localStorage.cart_id\n          }\n        }, node => {\n          node.addInlineFragmentOn('Checkout', checkout => {\n            checkout.add('totalTax');\n            checkout.add('taxesIncluded');\n            checkout.add('taxExempt');\n            checkout.add('subtotalPrice');\n            checkout.add('totalPrice');\n            checkout.add('email');\n            checkout.add('createdAt');\n            checkout.add('webUrl');\n            checkout.add('requiresShipping');\n          });\n        });\n      });\n      const shopRes = await client.graphQLClient.send(checkoutQuery);\n      console.log(\"***\");\n      console.log(shopRes);\n      console.log(\"***\");\n    };\n\n    this.testApollo = async () => {\n      const query = gql`\n  query {\n    shop {\n      name\n      description\n      products(first:20) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            title\n            options {\n              name\n              values\n            }\n            variants(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  title\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    src\n                  }\n                  price\n                }\n              }\n            }\n            images(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n      const res = await apolloClient.query({\n        query: query\n      });\n      console.log(\"***\");\n      console.log(res);\n      console.log(\"***\");\n    };\n\n    this.getShippingMethod = async () => {\n      const query = gql`\n\n  query checkout($checkoutid: ID!){\n\n      node(id: $checkoutid) {\n\n        ... on Checkout {\n\n            totalTax\n\n            taxesIncluded\n\n            taxExempt\n\n            subtotalPrice\n\n            totalPrice\n\n            email\n\n            createdAt\n\n            requiresShipping\n\n            availableShippingRates {\n\n              ready\n\n              shippingRates {\n\n                handle\n\n                priceV2 {\n\n                  amount\n\n                }\n\n                title\n\n              }\n\n            }\n\n        }\n\n    }\n\n  }\n  `;\n      const res = await apolloClient.query({\n        query: query,\n        variables: {\n          checkoutid: localStorage.cart_id\n        }\n      });\n      console.log(\"**checkoutid**\");\n      console.log(res);\n      this.setState({\n        res: res.data.node\n      });\n      console.log(\"*******\");\n    };\n\n    this.updateShipping = async shippingHandle => {\n      const mut = gql`mutation checkoutShippingLineUpdate($checkoutId: ID!, $shippingRateHandle: String!) {\ncheckoutShippingLineUpdate(checkoutId: $checkoutId, shippingRateHandle: $shippingRateHandle) {\n  checkout {\n    id\n  }\n  checkoutUserErrors {\n    code\n    field\n    message\n  }\n}\n}\n`;\n      const response = await apolloClient.mutate({\n        mutation: mut,\n        variables: {\n          checkoutId: localStorage.cart_id,\n          shippingRateHandle: shippingHandle\n        }\n      });\n      console.log(response);\n    };\n\n    this.updatepayment = async shippingHandle => {\n      const muta = gql`mutation checkoutCompleteWithCreditCardV2($checkoutId: ID!, $payment: CreditCardPaymentInputV2!) {\n            checkoutCompleteWithCreditCardV2(checkoutId: $checkoutId, payment: $payment) {\n              checkout {\n                id\n              }\n              checkoutUserErrors {\n                code\n                field\n                message\n              }\n              payment {\n                id\n              }\n            }\n          }\n`;\n      const resp = await apolloClient.mutate({\n        mutation: muta,\n        variables: {\n          checkoutId: localStorage.cart_id,\n          shippingRateHandle: shippingHandle\n        }\n      });\n      console.log(resp);\n    };\n\n    this.updatepart = async () => {\n      const query = gql`\n  query{\n    productByHandle(handle) {\n      pizzaSizeInches: metafield(namespace: \"my_fields\", key: \"part_number\") {\n        value\n        type\n      }\n  `;\n      const respo = await apolloClient.query({\n        query: query,\n        variables: {\n          \"namespace\": \"my_fields\",\n          \"key\": \"part_number\",\n          \"ownerType\": \"PRODUCT\"\n        }\n      });\n      console.log(\"**partnumber**\");\n      console.log(respo);\n      this.setState({\n        respo: respo.data.node\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.cart_id) {\n      console.log(\"Dont Create cart\");\n      this.fetchCart();\n    } else {\n      this.createCart();\n      console.log(\"Cart Created\");\n    }\n\n    this.getShippingMethod(); // this.testApollo();\n  } //\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ShopifyContext.Provider, {\n        value: { ...this.state,\n          fetchAllProducts: this.fetchProducts,\n          fetchProductInfo: this.fetchProductInfo,\n          fetchCollections: this.fetchCollections,\n          addProductToCart: this.addProductToCart,\n          fetchCart: this.fetchCart,\n          fetchCollectionByHandle: this.fetchCollectionByHandle,\n          removeProduct: this.removeProduct,\n          addDiscountCoupon: this.addDiscountCoupon,\n          removeDiscountCoupon: this.removeDiscountCoupon,\n          updateQuantity: this.updateQuantity,\n          updateShippingAddress: this.updateShippingAddress,\n          fetchSearchProducts: this.fetchSearchProducts,\n          getShippingMethod: this.getShippingMethod,\n          setShippingPrice: this.setShippingPrice,\n          updateShipping: this.updateShipping,\n          updatepart: this.updatepart\n        },\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nconst ShopConsumer = ShopifyContext.Consumer;\nexport { ShopConsumer, ShopifyContext };\nexport default ShopifyProvider;","map":{"version":3,"sources":["C:/Users/HP/Desktop/shopify/shopify/src/ShopifyContext.js"],"names":["React","Component","Client","ApolloClient","InMemoryCache","createHttpLink","setContext","gql","client","buildClient","domain","storefrontAccessToken","httpLink","uri","middlewareLink","headers","apolloClient","link","concat","cache","ShopifyContext","createContext","ShopifyProvider","state","products","product","collections","imgs","cart","selectedProducts","searchedProducts","res","shippingPrice","fetchProducts","fetchAll","setState","console","log","map","images","fetchProductByHandle","handle","fetchByHandle","fetchSearchProducts","key","filter","x","title","toLowerCase","includes","fetchCollections","collection","label","value","fetchProductInfo","removeProduct","checkoutId","lineitemsIds","checkout","removeLineItems","removeDiscountCoupon","discountCode","removeDiscount","addDiscountCoupon","addDiscount","setShippingPrice","fetchCollectionByHandle","selectedCatalogProduct","createCart","create","localStorage","setItem","id","fetchCart","fetch","getItem","then","addProductToCart","variantId","quantity","productItem","addLineItems","updateQuantity","updateLineItems","updateShippingAddress","cartId","shippingAddress","address","updateAddress","testGraphQL","productsQuery","graphQLClient","query","root","addConnection","args","first","add","data","send","collectionQuery","checkoutQuery","cart_id","node","addInlineFragmentOn","shopRes","testApollo","getShippingMethod","variables","checkoutid","updateShipping","shippingHandle","mut","response","mutate","mutation","shippingRateHandle","updatepayment","muta","resp","updatepart","respo","componentDidMount","render","fetchAllProducts","props","children","ShopConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Client from 'shopify-buy';\r\n\r\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport { setContext } from 'apollo-link-context';\r\nimport gql from 'graphql-tag';\r\n\r\n\r\nconst client = Client.buildClient({\r\n  domain: 's3bg.myshopify.com',\r\n  storefrontAccessToken: '7b036ffd844a4ddefa4e99c653c27bf3'\r\n});\r\n\r\n\r\n//\r\nconst httpLink = createHttpLink({ uri: 'http://s3bg.myshopify.com/api/graphql' })\r\n\r\nconst middlewareLink = setContext(() => ({\r\n  headers: {\r\n    'X-Shopify-Storefront-Access-Token': '7b036ffd844a4ddefa4e99c653c27bf3',\r\n\r\n  }\r\n}))\r\n\r\nconst apolloClient = new ApolloClient({\r\n  link: middlewareLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n})\r\n\r\nconst ShopifyContext = React.createContext();\r\n\r\nexport class ShopifyProvider extends Component {\r\n\r\n  state = {\r\n    products: [],\r\n    product: {},\r\n    collections: [],\r\n    imgs: [],\r\n    cart: {},\r\n    selectedProducts: [],\r\n    searchedProducts: [],\r\n    res: {},\r\n    shippingPrice: {}\r\n  };\r\n\r\n\r\n  //fetch all products\r\n  fetchProducts = async () => {\r\n    const products = await client.product.fetchAll();\r\n    this.setState({ products: products });\r\n    console.log(products);\r\n\r\n    products.map(product => {\r\n      console.log(product.images)\r\n    })\r\n  }\r\n\r\n  fetchProductByHandle = async handle => {\r\n    const product = await client.product.fetchByHandle(handle);\r\n    this.setState({ product });\r\n    //console.log(product);\r\n  }\r\n\r\n\r\n  //search\r\n  fetchSearchProducts = (key) => {\r\n    const searchedProducts = this.state.products.filter(x => x.title.toLowerCase().includes(key.toLowerCase()))\r\n    this.setState({ searchedProducts: searchedProducts });\r\n  }\r\n\r\n\r\n\r\n  //fetch collections\r\n  fetchCollections = async () => {\r\n    const collections = await client.collection.fetchAll();\r\n    console.log(collections)\r\n    collections.map(collection => {\r\n      console.log(collection.title);\r\n    })\r\n    this.setState({ collections: collections.map(x => ({ label: x.title, value: x.handle })) });\r\n  };\r\n\r\n  //fetch product info\r\n  fetchProductInfo = async (handle) => {\r\n    const product = await client.product.fetchByHandle(handle);\r\n    this.setState({ product: product });\r\n    this.setState({ imgs: product.images })\r\n  };\r\n\r\n  //remove product\r\n  removeProduct = async (checkoutId, lineitemsIds) => {\r\n    const cart = await client.checkout.removeLineItems(checkoutId, lineitemsIds);\r\n    this.setState({ cart: cart })\r\n  }\r\n\r\n  removeDiscountCoupon = async (checkoutId, discountCode) => {\r\n    const cart = await client.checkout.removeDiscount(checkoutId, discountCode);\r\n    this.setState({ cart: cart })\r\n\r\n  }\r\n  addDiscountCoupon = async (checkoutId, discountCode) => {\r\n    const cart = await client.checkout.addDiscount(checkoutId, discountCode);\r\n    this.setState({ cart: cart })\r\n\r\n  }\r\n\r\n  //setshipping\r\n  setShippingPrice = (shippingPrice) => {\r\n    this.setState({ shippingPrice: shippingPrice });\r\n  }\r\n\r\n  // localStorage.getItem(checkoutQuantity,lineitemsIds);\r\n\r\n  //fetch collection by handle\r\n  fetchCollectionByHandle = async (handle) => {\r\n    const selectedCatalogProduct = await client.collection.fetchByHandle(handle)\r\n    this.setState({ selectedProducts: selectedCatalogProduct.products });\r\n  };\r\n\r\n  //create cart\r\n  createCart = async () => {\r\n    const cart = await client.checkout.create();\r\n    localStorage.setItem(\"cart_id\", cart.id);\r\n    this.setState({ cart: cart });\r\n  }\r\n\r\n  //fetch cart\r\n  fetchCart = async () => {\r\n    client.checkout.fetch(localStorage.getItem(\"cart_id\")).then(cart => {\r\n      this.setState({ cart: cart });\r\n      console.log(\"cart :\");\r\n      console.log(cart);\r\n    });\r\n  }\r\n\r\n  //add items to cart\r\n  addProductToCart = async (variantId, quantity) => {\r\n    const productItem = {\r\n      variantId: variantId,\r\n      quantity: quantity\r\n    }\r\n    const cart = await client.checkout.addLineItems(this.state.cart.id, productItem);\r\n    this.setState({ cart: cart });\r\n  }\r\n\r\n\r\n\r\n  //updateQuantity\r\n  updateQuantity = async (checkoutId, id, quantity) => {\r\n    const cart = await client.checkout.updateLineItems(checkoutId, [{ id: id, quantity: quantity }])\r\n    this.setState({ cart: cart });\r\n  }\r\n\r\n  updateShippingAddress = async (cartId, shippingAddress) => {\r\n    const address = await client.checkout.updateShippingAddress(cartId, shippingAddress)\r\n    this.setState({ updateAddress: address })\r\n    //  const cart=await client.checkout.updateShippingAddress(cartId, shippingAddress)\r\n    // this.setState({cart});\r\n    // console.log(cart.shippingAddress);\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    if (localStorage.cart_id) {\r\n      console.log(\"Dont Create cart\")\r\n      this.fetchCart();\r\n    } else {\r\n      this.createCart();\r\n      console.log(\"Cart Created\")\r\n    }\r\n    this.getShippingMethod();\r\n    // this.testApollo();\r\n  }\r\n\r\n  //\r\n  testGraphQL = async () => {\r\n\r\n\r\n\r\n    const productsQuery = client.graphQLClient.query((root) => {\r\n      root.addConnection('products', { args: { first: 10 } }, (product) => {\r\n        product.add('title');\r\n\r\n      });\r\n    });\r\n    const { data } = await client.graphQLClient.send(productsQuery);\r\n\r\n    console.log(\"***\");\r\n    console.log(\"***\");\r\n    console.log(data);\r\n    console.log(\"***\");\r\n\r\n    const collectionQuery = client.graphQLClient.query((root) => {\r\n      root.addConnection('collections', { args: { first: 10 } }, (product) => {\r\n        product.add('id');\r\n\r\n      });\r\n    });\r\n    const res = await client.graphQLClient.send(collectionQuery);\r\n    console.log(\"***\");\r\n    console.log(res);\r\n    console.log(\"***\");\r\n\r\n    const checkoutQuery = client.graphQLClient.query((root) => {\r\n      root.add('node', { args: { id: localStorage.cart_id } }, (node) => {\r\n\r\n        node.addInlineFragmentOn('Checkout', (checkout) => {\r\n          checkout.add('totalTax');\r\n          checkout.add('taxesIncluded');\r\n          checkout.add('taxExempt');\r\n          checkout.add('subtotalPrice');\r\n          checkout.add('totalPrice');\r\n          checkout.add('email');\r\n          checkout.add('createdAt');\r\n          checkout.add('webUrl');\r\n          checkout.add('requiresShipping');\r\n\r\n        });\r\n      });\r\n    });\r\n\r\n    const shopRes = await client.graphQLClient.send(checkoutQuery);\r\n    console.log(\"***\");\r\n    console.log(shopRes);\r\n    console.log(\"***\");\r\n  }\r\n\r\n  testApollo = async () => {\r\n    const query = gql`\r\n  query {\r\n    shop {\r\n      name\r\n      description\r\n      products(first:20) {\r\n        pageInfo {\r\n          hasNextPage\r\n          hasPreviousPage\r\n        }\r\n        edges {\r\n          node {\r\n            id\r\n            title\r\n            options {\r\n              name\r\n              values\r\n            }\r\n            variants(first: 250) {\r\n              pageInfo {\r\n                hasNextPage\r\n                hasPreviousPage\r\n              }\r\n              edges {\r\n                node {\r\n                  title\r\n                  selectedOptions {\r\n                    name\r\n                    value\r\n                  }\r\n                  image {\r\n                    src\r\n                  }\r\n                  price\r\n                }\r\n              }\r\n            }\r\n            images(first: 250) {\r\n              pageInfo {\r\n                hasNextPage\r\n                hasPreviousPage\r\n              }\r\n              edges {\r\n                node {\r\n                  src\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n    const res = await apolloClient.query({ query: query });\r\n    console.log(\"***\");\r\n    console.log(res);\r\n    console.log(\"***\");\r\n  }\r\n\r\n\r\n  getShippingMethod = async () => {\r\n\r\n    const query = gql`\r\n\r\n  query checkout($checkoutid: ID!){\r\n\r\n      node(id: $checkoutid) {\r\n\r\n        ... on Checkout {\r\n\r\n            totalTax\r\n\r\n            taxesIncluded\r\n\r\n            taxExempt\r\n\r\n            subtotalPrice\r\n\r\n            totalPrice\r\n\r\n            email\r\n\r\n            createdAt\r\n\r\n            requiresShipping\r\n\r\n            availableShippingRates {\r\n\r\n              ready\r\n\r\n              shippingRates {\r\n\r\n                handle\r\n\r\n                priceV2 {\r\n\r\n                  amount\r\n\r\n                }\r\n\r\n                title\r\n\r\n              }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n  }\r\n  `\r\n\r\n    const res = await apolloClient.query({\r\n      query: query, variables: {\r\n\r\n        checkoutid: localStorage.cart_id\r\n\r\n      }\r\n    });\r\n\r\n    console.log(\"**checkoutid**\");\r\n\r\n    console.log(res);\r\n    this.setState({ res: res.data.node })\r\n\r\n    console.log(\"*******\");\r\n\r\n\r\n\r\n  }\r\n\r\n  updateShipping = async (shippingHandle) => {\r\n    const mut = gql`mutation checkoutShippingLineUpdate($checkoutId: ID!, $shippingRateHandle: String!) {\r\ncheckoutShippingLineUpdate(checkoutId: $checkoutId, shippingRateHandle: $shippingRateHandle) {\r\n  checkout {\r\n    id\r\n  }\r\n  checkoutUserErrors {\r\n    code\r\n    field\r\n    message\r\n  }\r\n}\r\n}\r\n`\r\n\r\n    const response = await apolloClient.mutate({\r\n      mutation: mut, variables: {\r\n\r\n        checkoutId: localStorage.cart_id,\r\n        shippingRateHandle: shippingHandle\r\n\r\n      }\r\n    });\r\n\r\n    console.log(response)\r\n\r\n  }\r\n\r\n  updatepayment = async (shippingHandle) => {\r\n    const muta = gql`mutation checkoutCompleteWithCreditCardV2($checkoutId: ID!, $payment: CreditCardPaymentInputV2!) {\r\n            checkoutCompleteWithCreditCardV2(checkoutId: $checkoutId, payment: $payment) {\r\n              checkout {\r\n                id\r\n              }\r\n              checkoutUserErrors {\r\n                code\r\n                field\r\n                message\r\n              }\r\n              payment {\r\n                id\r\n              }\r\n            }\r\n          }\r\n`\r\n\r\n    const resp = await apolloClient.mutate({\r\n      mutation: muta, variables: {\r\n\r\n        checkoutId: localStorage.cart_id,\r\n        shippingRateHandle: shippingHandle\r\n\r\n      }\r\n    });\r\n\r\n    console.log(resp)\r\n\r\n  }\r\n\r\n  updatepart = async () => {\r\n\r\n    const query = gql`\r\n  query{\r\n    productByHandle(handle) {\r\n      pizzaSizeInches: metafield(namespace: \"my_fields\", key: \"part_number\") {\r\n        value\r\n        type\r\n      }\r\n  `\r\n\r\n\r\n    const respo = await apolloClient.query({\r\n      query: query, variables: {\r\n          \"namespace\": \"my_fields\",\r\n          \"key\": \"part_number\",\r\n          \"ownerType\": \"PRODUCT\"\r\n\r\n      }\r\n    });\r\n\r\n    console.log(\"**partnumber**\");\r\n\r\n    console.log(respo);\r\n    this.setState({ respo: respo.data.node })\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        <ShopifyContext.Provider\r\n          value={{\r\n            ...this.state, fetchAllProducts: this.fetchProducts,\r\n            fetchProductInfo: this.fetchProductInfo,\r\n            fetchCollections: this.fetchCollections,\r\n            addProductToCart: this.addProductToCart,\r\n            fetchCart: this.fetchCart,\r\n            fetchCollectionByHandle: this.fetchCollectionByHandle,\r\n            removeProduct: this.removeProduct,\r\n            addDiscountCoupon: this.addDiscountCoupon,\r\n            removeDiscountCoupon: this.removeDiscountCoupon,\r\n            updateQuantity: this.updateQuantity,\r\n            updateShippingAddress: this.updateShippingAddress,\r\n            fetchSearchProducts: this.fetchSearchProducts,\r\n            getShippingMethod: this.getShippingMethod,\r\n            setShippingPrice: this.setShippingPrice,\r\n            updateShipping: this.updateShipping,\r\n            updatepart: this.updatepart\r\n          }}>\r\n          {this.props.children}\r\n        </ShopifyContext.Provider>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst ShopConsumer = ShopifyContext.Consumer;\r\n\r\nexport { ShopConsumer, ShopifyContext };\r\n\r\nexport default ShopifyProvider"]},"metadata":{},"sourceType":"module"}